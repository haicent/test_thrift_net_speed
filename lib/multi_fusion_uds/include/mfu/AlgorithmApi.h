/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AlgorithmApi_H
#define AlgorithmApi_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "multi_fusion_types.h"

namespace fusion_api {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AlgorithmApiIf {
 public:
  virtual ~AlgorithmApiIf() {}
  virtual void multiDeviceFusion(const std::map<std::string, std::vector<CameraTarget> > & cml, const std::map<std::string, std::vector<RadarTarget> > & rml, const std::map<std::string, std::vector<LidarTarget> > & lml) = 0;
};

class AlgorithmApiIfFactory {
 public:
  typedef AlgorithmApiIf Handler;

  virtual ~AlgorithmApiIfFactory() {}

  virtual AlgorithmApiIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AlgorithmApiIf* /* handler */) = 0;
  };

class AlgorithmApiIfSingletonFactory : virtual public AlgorithmApiIfFactory {
 public:
  AlgorithmApiIfSingletonFactory(const ::std::shared_ptr<AlgorithmApiIf>& iface) : iface_(iface) {}
  virtual ~AlgorithmApiIfSingletonFactory() {}

  virtual AlgorithmApiIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(AlgorithmApiIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<AlgorithmApiIf> iface_;
};

class AlgorithmApiNull : virtual public AlgorithmApiIf {
 public:
  virtual ~AlgorithmApiNull() {}
  void multiDeviceFusion(const std::map<std::string, std::vector<CameraTarget> > & /* cml */, const std::map<std::string, std::vector<RadarTarget> > & /* rml */, const std::map<std::string, std::vector<LidarTarget> > & /* lml */) override {
    return;
  }
};

typedef struct _AlgorithmApi_multiDeviceFusion_args__isset {
  _AlgorithmApi_multiDeviceFusion_args__isset() : cml(false), rml(false), lml(false) {}
  bool cml :1;
  bool rml :1;
  bool lml :1;
} _AlgorithmApi_multiDeviceFusion_args__isset;

class AlgorithmApi_multiDeviceFusion_args {
 public:

  AlgorithmApi_multiDeviceFusion_args(const AlgorithmApi_multiDeviceFusion_args&);
  AlgorithmApi_multiDeviceFusion_args& operator=(const AlgorithmApi_multiDeviceFusion_args&);
  AlgorithmApi_multiDeviceFusion_args() noexcept {
  }

  virtual ~AlgorithmApi_multiDeviceFusion_args() noexcept;
  std::map<std::string, std::vector<CameraTarget> >  cml;
  std::map<std::string, std::vector<RadarTarget> >  rml;
  std::map<std::string, std::vector<LidarTarget> >  lml;

  _AlgorithmApi_multiDeviceFusion_args__isset __isset;

  void __set_cml(const std::map<std::string, std::vector<CameraTarget> > & val);

  void __set_rml(const std::map<std::string, std::vector<RadarTarget> > & val);

  void __set_lml(const std::map<std::string, std::vector<LidarTarget> > & val);

  bool operator == (const AlgorithmApi_multiDeviceFusion_args & rhs) const
  {
    if (!(cml == rhs.cml))
      return false;
    if (!(rml == rhs.rml))
      return false;
    if (!(lml == rhs.lml))
      return false;
    return true;
  }
  bool operator != (const AlgorithmApi_multiDeviceFusion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlgorithmApi_multiDeviceFusion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlgorithmApi_multiDeviceFusion_pargs {
 public:


  virtual ~AlgorithmApi_multiDeviceFusion_pargs() noexcept;
  const std::map<std::string, std::vector<CameraTarget> > * cml;
  const std::map<std::string, std::vector<RadarTarget> > * rml;
  const std::map<std::string, std::vector<LidarTarget> > * lml;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlgorithmApi_multiDeviceFusion_result {
 public:

  AlgorithmApi_multiDeviceFusion_result(const AlgorithmApi_multiDeviceFusion_result&) noexcept;
  AlgorithmApi_multiDeviceFusion_result& operator=(const AlgorithmApi_multiDeviceFusion_result&) noexcept;
  AlgorithmApi_multiDeviceFusion_result() noexcept {
  }

  virtual ~AlgorithmApi_multiDeviceFusion_result() noexcept;

  bool operator == (const AlgorithmApi_multiDeviceFusion_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AlgorithmApi_multiDeviceFusion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlgorithmApi_multiDeviceFusion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlgorithmApi_multiDeviceFusion_presult {
 public:


  virtual ~AlgorithmApi_multiDeviceFusion_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AlgorithmApiClient : virtual public AlgorithmApiIf {
 public:
  AlgorithmApiClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AlgorithmApiClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void multiDeviceFusion(const std::map<std::string, std::vector<CameraTarget> > & cml, const std::map<std::string, std::vector<RadarTarget> > & rml, const std::map<std::string, std::vector<LidarTarget> > & lml) override;
  void send_multiDeviceFusion(const std::map<std::string, std::vector<CameraTarget> > & cml, const std::map<std::string, std::vector<RadarTarget> > & rml, const std::map<std::string, std::vector<LidarTarget> > & lml);
  void recv_multiDeviceFusion();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AlgorithmApiProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<AlgorithmApiIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (AlgorithmApiProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_multiDeviceFusion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AlgorithmApiProcessor(::std::shared_ptr<AlgorithmApiIf> iface) :
    iface_(iface) {
    processMap_["multiDeviceFusion"] = &AlgorithmApiProcessor::process_multiDeviceFusion;
  }

  virtual ~AlgorithmApiProcessor() {}
};

class AlgorithmApiProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AlgorithmApiProcessorFactory(const ::std::shared_ptr< AlgorithmApiIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< AlgorithmApiIfFactory > handlerFactory_;
};

class AlgorithmApiMultiface : virtual public AlgorithmApiIf {
 public:
  AlgorithmApiMultiface(std::vector<std::shared_ptr<AlgorithmApiIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AlgorithmApiMultiface() {}
 protected:
  std::vector<std::shared_ptr<AlgorithmApiIf> > ifaces_;
  AlgorithmApiMultiface() {}
  void add(::std::shared_ptr<AlgorithmApiIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void multiDeviceFusion(const std::map<std::string, std::vector<CameraTarget> > & cml, const std::map<std::string, std::vector<RadarTarget> > & rml, const std::map<std::string, std::vector<LidarTarget> > & lml) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->multiDeviceFusion(cml, rml, lml);
    }
    ifaces_[i]->multiDeviceFusion(cml, rml, lml);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AlgorithmApiConcurrentClient : virtual public AlgorithmApiIf {
 public:
  AlgorithmApiConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  AlgorithmApiConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void multiDeviceFusion(const std::map<std::string, std::vector<CameraTarget> > & cml, const std::map<std::string, std::vector<RadarTarget> > & rml, const std::map<std::string, std::vector<LidarTarget> > & lml) override;
  int32_t send_multiDeviceFusion(const std::map<std::string, std::vector<CameraTarget> > & cml, const std::map<std::string, std::vector<RadarTarget> > & rml, const std::map<std::string, std::vector<LidarTarget> > & lml);
  void recv_multiDeviceFusion(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
